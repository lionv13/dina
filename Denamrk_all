library (sp)
library (lattice)
library(ggplot2)
library (reshape2)
library (readxl)
library(tidyverse)
library (scales)
library (tibble)
library(writexl)
library (zoo)
library(data.table)
library (janitor)
library(stargazer)
library (openxlsx)
expo<-read_xlsx ("submissions-export broilers_text_keys.xlsx",col_names = TRUE )
data<-data.frame(expo,stringsAsFactors = FALSE, check.names = FALSE)
data <- subset(data, Fictional != "Yes")
##filter country
data_filtrada <- data %>% filter(Country =='Denmark')%>%select(-c(1, 2, 8, 9, 10, 11))

##get column name
col_name <- names(data_filtrada)[89]
## Move the column to after the first column
data_filtrada <- data_filtrada %>% relocate(!!sym(col_name), .after = 2)
##add column and fill the species
data_filtrada <- data_filtrada %>%
  add_column(species = "broilers", .after = 3) 
##move total weight
col_nametw <- names(data_filtrada)[c(5, 6, 7)]
data_filtrada <- data_filtrada %>% relocate(all_of(col_nametw), .after = 101)
data_filtrada <- data_filtrada %>% add_column(question = NA, .after = 4)
col_names_6_to_99 <- names(data_filtrada)[6:99]
#Get the number of rows in the dataframe
num_rows <- nrow(data_filtrada)

# Append the column names as values below the existing values in column 4
data_filtrada[1:length(col_names_6_to_99), 5] <- col_names_6_to_99
## add colnames
data_filtrada <- data_filtrada %>% add_column(`Mean value` = NA, .after = 5)
data_filtrada <- data_filtrada %>% add_column(`Variance_range` = NA, .after = 6)
data_filtrada <- data_filtrada %>% add_column(`Mode` = NA, .after = 7)
data_filtrada <- data_filtrada %>% add_column(`Percentage` = NA, .after = 8)
data_filtrada <- data_filtrada %>% add_column(`Cualitative Variation Index` = NA, .after = 9)
data_filtrada <- data_filtrada %>% add_column(`Number of Answers` = NA, .after = 10)

##mean variance 
##removecol
data_mean <- data_filtrada[, -c(1:11)]
# Convert first four columns to numeric 
data_mean[, 1:4] <- lapply(data_mean[, 1:4], function(x) as.numeric(as.character(x)))
#  Calculate the mean for the first four columns
mean_values <- colMeans(data_mean[, 1:4], na.rm = TRUE)
# Calculate variance
variance_values <- apply(data_mean[, 1:4], 2, var, na.rm = TRUE)
# Calculate the number of observations (non-NA values)
observations <- apply(data_mean[, 1:4], 2, function(x) sum(!is.na(x)))
data_filtrada[1:4, 6] <- mean_values  # Copy mean values to column 6
data_filtrada[1:4, 7] <- variance_values  # Copy variance values to column 7
data_filtrada[1:4, 11] <- observations 

##mode,rank,observations
# Custom function to calculate mode for a single column, excluding NA values
calculate_mode <- function(x) {
  x <- na.omit(x)  # Remove NA values
  uniq_vals <- unique(x)
  mode_value <- uniq_vals[which.max(tabulate(match(x, uniq_vals)))]
  # Calculate the frequency of the mode
  mode_frequency <- sum(x == mode_value)
  # Calculate the percentage of the mode
  mode_percentage <- (mode_frequency / length(x)) * 100
  return(list(mode_value = mode_value, mode_percentage = mode_percentage))
}
# Custom function to calculate the Index of Qualitative Variation (IVC)
calculate_ivc <- function(x) {
  x <- na.omit(x)  # Remove NA values
  N <- length(x)   # Total number of non-NA observations
  freq_table <- table(x)  # Frequency of each category
  freq_proportions <- freq_table / N  # Proportions of each category
  ivc <- 1 - sum(freq_proportions^2)  # Calculate IVC
  return(ivc)
}
# Subset the data frame to select columns 5 to 58
data_subset <- data_mean[, 7:60]
# Initialize a list to store the results for each column
results <- list()
# Loop through each column from 5 to 58
for (i in 1:ncol(data_subset)) {
  column_data <- data_subset[, i]
  # Remove NA values before processing
  column_data <- na.omit(column_data)
  # Calculate mode and its percentage
  mode_info <- calculate_mode(column_data)
  # Calculate the Index of Qualitative Variation (IVC)
  ivc_value <- calculate_ivc(column_data)
  # Calculate rank (handling NA by omitting them)
  rank_values <- rank(column_data, na.last = "keep", ties.method = "average")
  # Calculate number of observations (after NA removal)
  num_observations <- length(column_data)  # Since NAs are omitted, we use length
  # Store the results for the column in a list
  results[[i]] <- list(
    Mode = mode_info$mode_value,
    Mode_Percentage = mode_info$mode_percentage,
    IVC = ivc_value,
    Rank = rank_values,
    Num_Observations = num_observations
  )
}
# Convert the results into a data frame for better visualization
result_df <- data.frame(
  Column = colnames(data_subset),
  Mode = sapply(results, function(x) x$Mode),
  Mode_Percentage = sapply(results, function(x) x$Mode_Percentage),
  IVC = sapply(results, function(x) x$IVC),
  Num_Observations = sapply(results, function(x) x$Num_Observations)
)
data_filtrada[5:58, 8] <- result_df$Mode  # Copy mean values to column 6
data_filtrada[5:58, 9] <- result_df$Mode_Percentage  # Copy variance values to column 7
data_filtrada[5:58, 11] <- result_df$Num_Observations
data_filtrada[5:58, 10] <- result_df$IVC

##combined cell mean
data_mean[, 61] <- as.numeric(gsub("[^0-9.]", "", data_mean[, 61]))
mean_value1 <- mean(data_mean[, 61], na.rm = TRUE)
variance_value1 <- var(data_mean[, 61], na.rm = TRUE)
num_observations1 <- sum(!is.na(data_mean[, 61]))
data_filtrada[59, 6] <- mean_value1  # Copy mean values to column 6
data_filtrada[59, 7] <- variance_value1  # Copy variance values to column 7
data_filtrada[59, 11] <- num_observations1 

#mode,rank,observations questions 56
data_subset1 <- data_mean[, 62:85]
# Initialize a list to store the results for each column
results <- list()
# Loop through each column from 5 to 58
for (i in 1:ncol(data_subset1)) {
  column_data <- data_subset1[, i]
  # Remove NA values before processing
  column_data <- na.omit(column_data)
  # Calculate mode and its percentage
  mode_info <- calculate_mode(column_data)
  # Calculate the Index of Qualitative Variation (IVC)
  ivc_value <- calculate_ivc(column_data)
  # Calculate rank (handling NA by omitting them)
  rank_values <- rank(column_data, na.last = "keep", ties.method = "average")
  # Calculate number of observations (after NA removal)
  num_observations <- length(column_data)  # Since NAs are omitted, we use length
  # Store the results for the column in a list
  results[[i]] <- list(
    Mode = mode_info$mode_value,
    Mode_Percentage = mode_info$mode_percentage,
    IVC = ivc_value,
    Rank = rank_values,
    Num_Observations = num_observations
  )
}
result_df1 <- data.frame(
  Column = colnames(data_subset1),
  Mode = sapply(results, function(x) x$Mode),
  Mode_Percentage = sapply(results, function(x) x$Mode_Percentage),
  IVC = sapply(results, function(x) x$IVC),
  Num_Observations = sapply(results, function(x) x$Num_Observations)
)
data_filtrada[60:83, 8] <- result_df1$Mode  # Copy mean values to column 6
data_filtrada[60:83, 9] <- result_df1$Mode_Percentage  # Copy variance values to column 7
data_filtrada[60:83, 11] <- result_df1$Num_Observations
data_filtrada[60:83, 10] <- result_df1$IVC

##Main questions A,B.....
data_mean[, 86:96] <- lapply(data_mean[, 86:96], function(x) as.numeric(as.character(x)))
#  Calculate the mean for the first four columns
mean_values2 <- colMeans(data_mean[, 86:96], na.rm = TRUE)
# Calculate variance
variance_values2 <- apply(data_mean[, 86:96], 2, var, na.rm = TRUE)
# Calculate the number of observations (non-NA values)
observations2 <- apply(data_mean[, 86:96], 2, function(x) sum(!is.na(x)))
data_filtrada[84:94, 6] <- mean_values2  # Copy mean values to column 6
data_filtrada[84:94, 7] <- variance_values2  # Copy variance values to column 7
data_filtrada[84:94, 11] <- observations2

##overall
data_mean[, 97] <- sapply(data_mean[, 97], function(x) as.numeric(as.character(x)))

# Calculate the mean of column 151, removing any NA values
mean_values3 <- mean(data_mean[, 97], na.rm = TRUE)
# Calculate variance
variance_values3 <- var(data_mean[, 97], na.rm = TRUE)

# remove questions
data_filtrada1 <- data_filtrada[, -c(12:108)]
data_filtrada1 <- data_filtrada1 %>% add_column(`Mean Total score` = NA, .after = 3)%>%
  mutate(species = ifelse(row_number() <= 94, "broilers", species))
data_filtrada1 <- data_filtrada1 %>% add_column(`Variance` = NA, .after = 4)%>%
  mutate(Country = ifelse(row_number() <= 94, "Denmark", Country))

data_filtrada1[1:1, 4] <- mean_values3  # Copy mean values to column 6
data_filtrada1[1:1, 5] <- variance_values3  # Copy variance values to column 7
file_name <- "Biocheck_09.07.xlsx"
sheet_name <- "Broilers"
write.xlsx(data_filtrada1, file = file_name, sheetName = sheet_name, overwrite = TRUE)

expo<-read_xlsx ("submissions-export dairy cattle_text_keys.xlsx",col_names = TRUE )
data<-data.frame(expo,stringsAsFactors = FALSE, check.names = FALSE)
data <- subset(data, Fictional != "Yes")
##filter country
data_filtrada <- data %>% filter(Country =='Denmark')%>%select(-c(1, 2, 8, 9, 10, 11))
##get column name
col_name <- names(data_filtrada)[143]
## Move the column to after the first column
data_filtrada <- data_filtrada %>% relocate(!!sym(col_name), .after = 2)
##add column and fill the species
data_filtrada <- data_filtrada %>% add_column(species = "Dairy_cattle", .after = 3)
##move total weight
col_nametw <- names(data_filtrada)[c(5, 6, 7)]
data_filtrada <- data_filtrada %>% relocate(all_of(col_nametw), .after = 155)
data_filtrada <- data_filtrada %>% add_column(question = NA, .after = 4)

col_names_6_to_153 <- names(data_filtrada)[6:153]
#Get the number of rows in the dataframe
num_rows <- nrow(data_filtrada)

# Append the column names as values below the existing values in column 4
data_filtrada[1:length(col_names_6_to_153), 5] <- col_names_6_to_153
## add colnames
data_filtrada <- data_filtrada %>% add_column(`Mean value` = NA, .after = 5)
data_filtrada <- data_filtrada %>% add_column(`Variance_range` = NA, .after = 6)
data_filtrada <- data_filtrada %>% add_column(`Mode` = NA, .after = 7)
data_filtrada <- data_filtrada %>% add_column(`Percentage` = NA, .after = 8)
data_filtrada <- data_filtrada %>% add_column(`Cualitative Variation Index` = NA, .after = 9)
data_filtrada <- data_filtrada %>% add_column(`Number of Answers` = NA, .after = 10)

##mean variance 
##removecol
data_mean <- data_filtrada[, -c(1:11)]
data_cuantitative <- c(1, 3:8, 10:13, 20, 93, 106, 110:114, 116, 127, 128)
data_mean_subset <- data_mean[, data_cuantitative]
data_mean_subset <- lapply(data_mean_subset, function(x) as.numeric(as.character(x)))
data_mean_subset <- as.data.frame(data_mean_subset)
mean_values <- colMeans(data_mean_subset, na.rm = TRUE)
variance_values <- apply(data_mean_subset, 2, var, na.rm = TRUE)
num_observations <- apply(data_mean_subset, 2, function(x) sum(!is.na(x)))

data_filtrada[data_cuantitative, 6] <- mean_values  # Copy mean values to column 6
data_filtrada[data_cuantitative, 7] <- variance_values  # Copy variance values to column 7
data_filtrada[data_cuantitative, 11] <- num_observations 

##mode,rank,observations
data_cualitative <- c(2,9, 14:19, 21:92, 94:105, 107:109, 115, 117:126, 129:137)
# Custom function to calculate mode for a single column, excluding NA values
calculate_mode <- function(x) {
  x <- na.omit(x)  # Remove NA values
  uniq_vals <- unique(x)
  mode_value <- uniq_vals[which.max(tabulate(match(x, uniq_vals)))]
  # Calculate the frequency of the mode
  mode_frequency <- sum(x == mode_value)
  # Calculate the percentage of the mode
  mode_percentage <- (mode_frequency / length(x)) * 100
  return(list(mode_value = mode_value, mode_percentage = mode_percentage))
}
# Custom function to calculate the Index of Qualitative Variation (IVC)
calculate_ivc <- function(x) {
  x <- na.omit(x)  # Remove NA values
  N <- length(x)   # Total number of non-NA observations
  freq_table <- table(x)  # Frequency of each category
  freq_proportions <- freq_table / N  # Proportions of each category
  ivc <- 1 - sum(freq_proportions^2)  # Calculate IVC
  return(ivc)
}
# Subset the data frame to select columns 5 to 58
data_subset <- data_mean[, data_cualitative]
# Initialize a list to store the results for each column
results <- list()
# Loop through each column from 5 to 58
for (i in 1:ncol(data_subset)) {
  column_data <- data_subset[, i]
  # Remove NA values before processing
  column_data <- na.omit(column_data)
  # Calculate mode and its percentage
  mode_info <- calculate_mode(column_data)
  # Calculate the Index of Qualitative Variation (IVC)
  ivc_value <- calculate_ivc(column_data)
  # Calculate rank (handling NA by omitting them)
  rank_values <- rank(column_data, na.last = "keep", ties.method = "average")
  # Calculate number of observations (after NA removal)
  num_observations <- length(column_data)  # Since NAs are omitted, we use length
  # Store the results for the column in a list
  results[[i]] <- list(
    Mode = mode_info$mode_value,
    Mode_Percentage = mode_info$mode_percentage,
    IVC = ivc_value,
    Rank = rank_values,
    Num_Observations = num_observations
  )
}
# Convert the results into a data frame for better visualization
result_df <- data.frame(
  Column = colnames(data_subset),
  Mode = sapply(results, function(x) x$Mode),
  Mode_Percentage = sapply(results, function(x) x$Mode_Percentage),
  IVC = sapply(results, function(x) x$IVC),
  Num_Observations = sapply(results, function(x) x$Num_Observations)
)

num_modes <- length(result_df$Mode)
num_perc <- length(result_df$Mode_Percentage)
num_obs<-length(result_df$Num_Observations)
num_IVC<-length(result_df$IVC)
num_rows <- length(data_cualitative)
num_iterations <- pmin(num_modes, num_perc, num_obs, num_IVC, num_rows)

# Assign mode, mode percentage, number of observations, and IVC values to the specified rows
for (i in seq_len(num_iterations)) {
  data_filtrada[data_cualitative[i], 8] <- result_df$Mode[i]                # Column 8 for Mode
  data_filtrada[data_cualitative[i], 9] <- result_df$Mode_Percentage[i]     # Column 9 for Mode Percentage
  data_filtrada[data_cualitative[i], 11] <- result_df$Num_Observations[i]   # Column 11 for Number of Observations
  data_filtrada[data_cualitative[i], 10] <- result_df$IVC[i]                # Column 10 for IVC
}

##Main questions A,B.....
data_mean[, 138:148] <- lapply(data_mean[, 138:148], function(x) as.numeric(as.character(x)))
#  Calculate the mean for the first four columns
mean_values2 <- colMeans(data_mean[, 138:148], na.rm = TRUE)
# Calculate variance
variance_values2 <- apply(data_mean[, 138:148], 2, var, na.rm = TRUE)
# Calculate the number of observations (non-NA values)
observations2 <- apply(data_mean[, 138:148], 2, function(x) sum(!is.na(x)))
data_filtrada[138:148, 6] <- mean_values2  # Copy mean values to column 6
data_filtrada[138:148, 7] <- variance_values2  # Copy variance values to column 7
data_filtrada[138:148, 11] <- observations2

data_mean[, 151] <- sapply(data_mean[, 151], function(x) as.numeric(as.character(x)))

# Calculate the mean of column 151, removing any NA values
mean_values3 <- mean(data_mean[, 151], na.rm = TRUE)
# Calculate variance
variance_values3 <- var(data_mean[, 151], na.rm = TRUE)
#remove columns questions

data_filtrada2 <- data_filtrada%>% select(-c(12:162))
##insert total mean

data_filtrada2 <- data_filtrada2 %>% add_column(`Mean Total score` = NA, .after = 3)%>%
  mutate(species = ifelse(row_number() <= 148, "Dairy_cattle", species))
data_filtrada2 <- data_filtrada2 %>% add_column(`Variance` = NA, .after = 4)%>%
  mutate(Country = ifelse(row_number() <= 148, "Denmark", Country))

data_filtrada2[1:1, 4] <- mean_values3  # Copy mean values to column 6
data_filtrada2[1:1, 5] <- variance_values3  # Copy variance values to column 7

file_name <- "Biocheck_09.07.xlsx"
sheet_name <- "Dairy_cattle"
write.xlsx(data_filtrada2, file = file_name, sheetName = sheet_name, overwrite = TRUE)

expo<-read_xlsx ("submissions-export pigs indoor_text_keys.xlsx",col_names = TRUE )
data<-data.frame(expo,stringsAsFactors = FALSE, check.names = FALSE)
data <- subset(data, Fictional != "Yes")
##filter country
data_filtrada <- data %>% filter(Country =='Denmark')%>%select(-c(1, 2, 8, 9, 10, 11))

##get column name
col_name <- names(data_filtrada)[125]
## Move the column to after the first column
data_filtrada <- data_filtrada %>% relocate(!!sym(col_name), .after = 2)
##add column and fill the species
data_filtrada <- data_filtrada %>% add_column(species = "Pigs_indoor", .after = 3)
##move total weight
col_nametw <- names(data_filtrada)[c(5, 6, 7)]
data_filtrada <- data_filtrada %>% relocate(all_of(col_nametw), .after = 138)
data_filtrada <- data_filtrada %>% add_column(question = NA, .after = 4)

col_names_6_to_153 <- names(data_filtrada)[6:136]
#Get the number of rows in the dataframe
num_rows <- nrow(data_filtrada)

# Append the column names as values below the existing values in column 4
data_filtrada[1:length(col_names_6_to_153), 5] <- col_names_6_to_153
## add colnames
data_filtrada <- data_filtrada %>% add_column(`Mean value` = NA, .after = 5)
data_filtrada <- data_filtrada %>% add_column(`Variance_range` = NA, .after = 6)
data_filtrada <- data_filtrada %>% add_column(`Mode` = NA, .after = 7)
data_filtrada <- data_filtrada %>% add_column(`Percentage` = NA, .after = 8)
data_filtrada <- data_filtrada %>% add_column(`Cualitative Variation Index` = NA, .after = 9)
data_filtrada <- data_filtrada %>% add_column(`Number of Answers` = NA, .after = 10)

##mean variance 
##removecol
data_mean <- data_filtrada[, -c(1:11)]
data_cuantitative <- c(3:10, 18, 86, 112)
data_mean_subset <- data_mean[, data_cuantitative]
data_mean_subset <- lapply(data_mean_subset, function(x) as.numeric(as.character(x)))
data_mean_subset <- as.data.frame(data_mean_subset)
mean_values <- colMeans(data_mean_subset, na.rm = TRUE)
variance_values <- apply(data_mean_subset, 2, var, na.rm = TRUE)
num_observations <- apply(data_mean_subset, 2, function(x) sum(!is.na(x)))

data_filtrada[data_cuantitative, 6] <- mean_values  # Copy mean values to column 6
data_filtrada[data_cuantitative, 7] <- variance_values  # Copy variance values to column 7
data_filtrada[data_cuantitative, 11] <- num_observations 

##mode,rank,observations
data_cualitative <- c(1,2,11:17, 19:85, 87:111, 113:119)
# Custom function to calculate mode for a single column, excluding NA values
calculate_mode <- function(x) {
  x <- na.omit(x)  # Remove NA values
  uniq_vals <- unique(x)
  mode_value <- uniq_vals[which.max(tabulate(match(x, uniq_vals)))]
  # Calculate the frequency of the mode
  mode_frequency <- sum(x == mode_value)
  # Calculate the percentage of the mode
  mode_percentage <- (mode_frequency / length(x)) * 100
  return(list(mode_value = mode_value, mode_percentage = mode_percentage))
}
# Custom function to calculate the Index of Qualitative Variation (IVC)
calculate_ivc <- function(x) {
  x <- na.omit(x)  # Remove NA values
  N <- length(x)   # Total number of non-NA observations
  freq_table <- table(x)  # Frequency of each category
  freq_proportions <- freq_table / N  # Proportions of each category
  ivc <- 1 - sum(freq_proportions^2)  # Calculate IVC
  return(ivc)
}
# Subset the data frame to select columns 5 to 58
data_subset <- data_mean[, data_cualitative]
# Initialize a list to store the results for each column
results <- list()
# Loop through each column from 5 to 58
for (i in 1:ncol(data_subset)) {
  column_data <- data_subset[, i]
  # Remove NA values before processing
  column_data <- na.omit(column_data)
  # Calculate mode and its percentage
  mode_info <- calculate_mode(column_data)
  # Calculate the Index of Qualitative Variation (IVC)
  ivc_value <- calculate_ivc(column_data)
  # Calculate rank (handling NA by omitting them)
  rank_values <- rank(column_data, na.last = "keep", ties.method = "average")
  # Calculate number of observations (after NA removal)
  num_observations <- length(column_data)  # Since NAs are omitted, we use length
  # Store the results for the column in a list
  results[[i]] <- list(
    Mode = mode_info$mode_value,
    Mode_Percentage = mode_info$mode_percentage,
    IVC = ivc_value,
    Rank = rank_values,
    Num_Observations = num_observations
  )
}
# Convert the results into a data frame for better visualization
result_df <- data.frame(
  Column = colnames(data_subset),
  Mode = sapply(results, function(x) x$Mode),
  Mode_Percentage = sapply(results, function(x) x$Mode_Percentage),
  IVC = sapply(results, function(x) x$IVC),
  Num_Observations = sapply(results, function(x) x$Num_Observations)
)

num_modes <- length(result_df$Mode)
num_perc <- length(result_df$Mode_Percentage)
num_obs<-length(result_df$Num_Observations)
num_IVC<-length(result_df$IVC)
num_rows <- length(data_cualitative)
num_iterations <- pmin(num_modes, num_perc, num_obs, num_IVC, num_rows)

# Assign mode, mode percentage, number of observations, and IVC values to the specified rows
for (i in seq_len(num_iterations)) {
  data_filtrada[data_cualitative[i], 8] <- result_df$Mode[i]                # Column 8 for Mode
  data_filtrada[data_cualitative[i], 9] <- result_df$Mode_Percentage[i]     # Column 9 for Mode Percentage
  data_filtrada[data_cualitative[i], 11] <- result_df$Num_Observations[i]   # Column 11 for Number of Observations
  data_filtrada[data_cualitative[i], 10] <- result_df$IVC[i]                # Column 10 for IVC
}

##Main questions A,B.....
data_mean[, 120:131] <- lapply(data_mean[, 120:131], function(x) as.numeric(as.character(x)))
#  Calculate the mean for the first four columns
mean_values2 <- colMeans(data_mean[, 120:131], na.rm = TRUE)
# Calculate variance
variance_values2 <- apply(data_mean[, 120:131], 2, var, na.rm = TRUE)
# Calculate the number of observations (non-NA values)
observations2 <- apply(data_mean[, 120:131], 2, function(x) sum(!is.na(x)))
data_filtrada[120:131, 6] <- mean_values2  # Copy mean values to column 6
data_filtrada[120:131, 7] <- variance_values2  # Copy variance values to column 7
data_filtrada[120:131, 11] <- observations2

data_mean[, 134] <- sapply(data_mean[, 134], function(x) as.numeric(as.character(x)))

# Calculate the mean of column 
mean_values3 <- mean(data_mean[, 134], na.rm = TRUE)
# Calculate variance
variance_values3 <- var(data_mean[, 134], na.rm = TRUE)
#remove columns questions

data_filtrada3 <- data_filtrada%>% select(-c(12:145))
##inser total mean

data_filtrada3 <- data_filtrada3 %>% add_column(`Mean Total score` = NA, .after = 3)%>%
  mutate(species = ifelse(row_number() <= 131, "Pigs_indoor", species))
data_filtrada3 <- data_filtrada3 %>% add_column(`Variance` = NA, .after = 4)%>%
  mutate(Country = ifelse(row_number() <= 131, "Denmark", Country))


data_filtrada3[1:1, 4] <- mean_values3  # Copy mean values to column 6
data_filtrada3[1:1, 5] <- variance_values3  # Copy variance values to column 7

file_name <- "Biocheck_09.07.xlsx"
sheet_name <- "Pigs_indoor"
write.xlsx(data_filtrada3, file = file_name, sheetName = sheet_name, overwrite = TRUE)

expo<-read_xlsx ("submissions-export pigs outdoor_text_keys.xlsx",col_names = TRUE )
data<-data.frame(expo,stringsAsFactors = FALSE, check.names = FALSE)
data <- subset(data, Fictional != "Yes")
##filter country
data_filtrada <- data %>% filter(Country =='Denmark')%>%select(-c(1, 2, 8, 9, 10, 11))

##get column name
col_name <- names(data_filtrada)[140]
## Move the column to after the first column
data_filtrada <- data_filtrada %>% relocate(!!sym(col_name), .after = 2)
##add column and fill the species
data_filtrada <- data_filtrada %>% add_column(species = "Pigs_outdoor", .after = 3)
##move total weight
col_nametw <- names(data_filtrada)[c(5, 6, 7)]
data_filtrada <- data_filtrada %>% relocate(all_of(col_nametw), .after = 153)
data_filtrada <- data_filtrada %>% add_column(question = NA, .after = 4)

col_names_6_to_153 <- names(data_filtrada)[6:151]
#Get the number of rows in the dataframe
num_rows <- nrow(data_filtrada)

# Append the column names as values below the existing values in column 4
data_filtrada[1:length(col_names_6_to_153), 5] <- col_names_6_to_153
## add colnames
data_filtrada <- data_filtrada %>% add_column(`Mean value` = NA, .after = 5)
data_filtrada <- data_filtrada %>% add_column(`Variance_range` = NA, .after = 6)
data_filtrada <- data_filtrada %>% add_column(`Mode` = NA, .after = 7)
data_filtrada <- data_filtrada %>% add_column(`Percentage` = NA, .after = 8)
data_filtrada <- data_filtrada %>% add_column(`Cualitative Variation Index` = NA, .after = 9)
data_filtrada <- data_filtrada %>% add_column(`Number of Answers` = NA, .after = 10)

##mean variance 
##removecol
data_mean <- data_filtrada[, -c(1:11)]
data_cuantitative <- c(6:9, 29)
data_mean_subset <- data_mean[, data_cuantitative]
data_mean_subset <- lapply(data_mean_subset, function(x) as.numeric(as.character(x)))
data_mean_subset <- as.data.frame(data_mean_subset)
mean_values <- colMeans(data_mean_subset, na.rm = TRUE)
variance_values <- apply(data_mean_subset, 2, var, na.rm = TRUE)
num_observations <- apply(data_mean_subset, 2, function(x) sum(!is.na(x)))

data_filtrada[data_cuantitative, 6] <- mean_values  # Copy mean values to column 6
data_filtrada[data_cuantitative, 7] <- variance_values  # Copy variance values to column 7
data_filtrada[data_cuantitative, 11] <- num_observations 

##mode,rank,observations
data_cualitative <- c(1:5,10:28, 30:134)
# Custom function to calculate mode for a single column, excluding NA values
calculate_mode <- function(x) {
  x <- na.omit(x)  # Remove NA values
  uniq_vals <- unique(x)
  mode_value <- uniq_vals[which.max(tabulate(match(x, uniq_vals)))]
  # Calculate the frequency of the mode
  mode_frequency <- sum(x == mode_value)
  # Calculate the percentage of the mode
  mode_percentage <- (mode_frequency / length(x)) * 100
  return(list(mode_value = mode_value, mode_percentage = mode_percentage))
}
# Custom function to calculate the Index of Qualitative Variation (IVC)
calculate_ivc <- function(x) {
  x <- na.omit(x)  # Remove NA values
  N <- length(x)   # Total number of non-NA observations
  freq_table <- table(x)  # Frequency of each category
  freq_proportions <- freq_table / N  # Proportions of each category
  ivc <- 1 - sum(freq_proportions^2)  # Calculate IVC
  return(ivc)
}
# Subset the data frame to select columns 5 to 58
data_subset <- data_mean[, data_cualitative]
# Initialize a list to store the results for each column
results <- list()
# Loop through each column from 5 to 58
for (i in 1:ncol(data_subset)) {
  column_data <- data_subset[, i]
  # Remove NA values before processing
  column_data <- na.omit(column_data)
  # Calculate mode and its percentage
  mode_info <- calculate_mode(column_data)
  # Calculate the Index of Qualitative Variation (IVC)
  ivc_value <- calculate_ivc(column_data)
  # Calculate rank (handling NA by omitting them)
  rank_values <- rank(column_data, na.last = "keep", ties.method = "average")
  # Calculate number of observations (after NA removal)
  num_observations <- length(column_data)  # Since NAs are omitted, we use length
  # Store the results for the column in a list
  results[[i]] <- list(
    Mode = mode_info$mode_value,
    Mode_Percentage = mode_info$mode_percentage,
    IVC = ivc_value,
    Rank = rank_values,
    Num_Observations = num_observations
  )
}
# Convert the results into a data frame for better visualization
result_df <- data.frame(
  Column = colnames(data_subset),
  Mode = sapply(results, function(x) x$Mode),
  Mode_Percentage = sapply(results, function(x) x$Mode_Percentage),
  IVC = sapply(results, function(x) x$IVC),
  Num_Observations = sapply(results, function(x) x$Num_Observations)
)

num_modes <- length(result_df$Mode)
num_perc <- length(result_df$Mode_Percentage)
num_obs<-length(result_df$Num_Observations)
num_IVC<-length(result_df$IVC)
num_rows <- length(data_cualitative)
num_iterations <- pmin(num_modes, num_perc, num_obs, num_IVC, num_rows)

# Assign mode, mode percentage, number of observations, and IVC values to the specified rows
for (i in seq_len(num_iterations)) {
  data_filtrada[data_cualitative[i], 8] <- result_df$Mode[i]                # Column 8 for Mode
  data_filtrada[data_cualitative[i], 9] <- result_df$Mode_Percentage[i]     # Column 9 for Mode Percentage
  data_filtrada[data_cualitative[i], 11] <- result_df$Num_Observations[i]   # Column 11 for Number of Observations
  data_filtrada[data_cualitative[i], 10] <- result_df$IVC[i]                # Column 10 for IVC
}

##Main questions A,B.....
data_mean[, 135:146] <- lapply(data_mean[, 135:146], function(x) as.numeric(as.character(x)))
#  Calculate the mean for the first four columns
mean_values2 <- colMeans(data_mean[, 135:146], na.rm = TRUE)
# Calculate variance
variance_values2 <- apply(data_mean[, 135:146], 2, var, na.rm = TRUE)
# Calculate the number of observations (non-NA values)
observations2 <- apply(data_mean[, 135:146], 2, function(x) sum(!is.na(x)))
data_filtrada[135:146, 6] <- mean_values2  # Copy mean values to column 6
data_filtrada[135:146, 7] <- variance_values2  # Copy variance values to column 7
data_filtrada[135:146, 11] <- observations2

data_mean[, 149] <- sapply(data_mean[, 149], function(x) as.numeric(as.character(x)))

# Calculate the mean of column 
mean_values3 <- mean(data_mean[, 149], na.rm = TRUE)
# Calculate variance
variance_values3 <- var(data_mean[, 149], na.rm = TRUE)
#remove columns questions

data_filtrada4 <- data_filtrada%>% select(-c(12:160))
##inser total mean

data_filtrada4 <- data_filtrada4 %>% add_column(`Mean Total score` = NA, .after = 3)%>%
  mutate(species = ifelse(row_number() <= 146, "Pigs_outdoor", species))
data_filtrada4 <- data_filtrada4 %>% add_column(`Variance` = NA, .after = 4)%>%
  mutate(Country = ifelse(row_number() <= 146, "Denmark", Country))


data_filtrada4[1:1, 4] <- mean_values3  # Copy mean values to column 6
data_filtrada4[1:1, 5] <- variance_values3  # Copy variance values to column 7

file_name <- "Biocheck_09.07.xlsx"
sheet_name <- "Pigs_outdoor"
write.xlsx(data_filtrada4, file = file_name, sheetName = sheet_name, overwrite = TRUE)

expo<-read_xlsx ("submissions-export small ruminants meat_text_keys.xlsx",col_names = TRUE )
data<-data.frame(expo,stringsAsFactors = FALSE, check.names = FALSE)
data <- subset(data, Fictional != "Yes")
##filter country
data_filtrada <- data %>% filter(Country =='Denmark')%>%select(-c(1, 2, 8, 9, 10, 11))

##get column name
col_name <- names(data_filtrada)[116]
## Move the column to after the first column
data_filtrada <- data_filtrada %>% relocate(!!sym(col_name), .after = 2)
##add column and fill the species
data_filtrada <- data_filtrada %>% add_column(species = "Small_ruminants_meat", .after = 3)
##move total weight
col_nametw <- names(data_filtrada)[c(5, 6, 7)]
data_filtrada <- data_filtrada %>% relocate(all_of(col_nametw), .after = 127)
data_filtrada <- data_filtrada %>% add_column(question = NA, .after = 4)

col_names_6_to_153 <- names(data_filtrada)[6:125]
#Get the number of rows in the dataframe
num_rows <- nrow(data_filtrada)

# Append the column names as values below the existing values in column 4
data_filtrada[1:length(col_names_6_to_153), 5] <- col_names_6_to_153
## add colnames
data_filtrada <- data_filtrada %>% add_column(`Mean value` = NA, .after = 5)
data_filtrada <- data_filtrada %>% add_column(`Variance_range` = NA, .after = 6)
data_filtrada <- data_filtrada %>% add_column(`Mode` = NA, .after = 7)
data_filtrada <- data_filtrada %>% add_column(`Percentage` = NA, .after = 8)
data_filtrada <- data_filtrada %>% add_column(`Cualitative Variation Index` = NA, .after = 9)
data_filtrada <- data_filtrada %>% add_column(`Number of Answers` = NA, .after = 10)

##mean variance 
##removecol
data_mean <- data_filtrada[, -c(1:11)]
data_cuantitative <- c(2:5, 8:11,18,92,103,104)
data_mean_subset <- data_mean[, data_cuantitative]
data_mean_subset <- lapply(data_mean_subset, function(x) as.numeric(as.character(x)))
data_mean_subset <- as.data.frame(data_mean_subset)
mean_values <- colMeans(data_mean_subset, na.rm = TRUE)
variance_values <- apply(data_mean_subset, 2, var, na.rm = TRUE)
num_observations <- apply(data_mean_subset, 2, function(x) sum(!is.na(x)))

data_filtrada[data_cuantitative, 6] <- mean_values  # Copy mean values to column 6
data_filtrada[data_cuantitative, 7] <- variance_values  # Copy variance values to column 7
data_filtrada[data_cuantitative, 11] <- num_observations 

##mode,rank,observations
data_cualitative <- c(1,6,7,12:17,19:91,93:102,105:110)
# Custom function to calculate mode for a single column, excluding NA values
calculate_mode <- function(x) {
  x <- na.omit(x)  # Remove NA values
  uniq_vals <- unique(x)
  mode_value <- uniq_vals[which.max(tabulate(match(x, uniq_vals)))]
  # Calculate the frequency of the mode
  mode_frequency <- sum(x == mode_value)
  # Calculate the percentage of the mode
  mode_percentage <- (mode_frequency / length(x)) * 100
  return(list(mode_value = mode_value, mode_percentage = mode_percentage))
}
# Custom function to calculate the Index of Qualitative Variation (IVC)
calculate_ivc <- function(x) {
  x <- na.omit(x)  # Remove NA values
  N <- length(x)   # Total number of non-NA observations
  freq_table <- table(x)  # Frequency of each category
  freq_proportions <- freq_table / N  # Proportions of each category
  ivc <- 1 - sum(freq_proportions^2)  # Calculate IVC
  return(ivc)
}
# Subset the data frame to select columns 5 to 58
data_subset <- data_mean[, data_cualitative]
# Initialize a list to store the results for each column
results <- list()
# Loop through each column from 5 to 58
for (i in 1:ncol(data_subset)) {
  column_data <- data_subset[, i]
  # Remove NA values before processing
  column_data <- na.omit(column_data)
  # Calculate mode and its percentage
  mode_info <- calculate_mode(column_data)
  # Calculate the Index of Qualitative Variation (IVC)
  ivc_value <- calculate_ivc(column_data)
  # Calculate rank (handling NA by omitting them)
  rank_values <- rank(column_data, na.last = "keep", ties.method = "average")
  # Calculate number of observations (after NA removal)
  num_observations <- length(column_data)  # Since NAs are omitted, we use length
  # Store the results for the column in a list
  results[[i]] <- list(
    Mode = mode_info$mode_value,
    Mode_Percentage = mode_info$mode_percentage,
    IVC = ivc_value,
    Rank = rank_values,
    Num_Observations = num_observations
  )
}
# Convert the results into a data frame for better visualization
result_df <- data.frame(
  Column = colnames(data_subset),
  Mode = sapply(results, function(x) x$Mode),
  Mode_Percentage = sapply(results, function(x) x$Mode_Percentage),
  IVC = sapply(results, function(x) x$IVC),
  Num_Observations = sapply(results, function(x) x$Num_Observations)
)

num_modes <- length(result_df$Mode)
num_perc <- length(result_df$Mode_Percentage)
num_obs<-length(result_df$Num_Observations)
num_IVC<-length(result_df$IVC)
num_rows <- length(data_cualitative)
num_iterations <- pmin(num_modes, num_perc, num_obs, num_IVC, num_rows)

# Assign mode, mode percentage, number of observations, and IVC values to the specified rows
for (i in seq_len(num_iterations)) {
  data_filtrada[data_cualitative[i], 8] <- result_df$Mode[i]                # Column 8 for Mode
  data_filtrada[data_cualitative[i], 9] <- result_df$Mode_Percentage[i]     # Column 9 for Mode Percentage
  data_filtrada[data_cualitative[i], 11] <- result_df$Num_Observations[i]   # Column 11 for Number of Observations
  data_filtrada[data_cualitative[i], 10] <- result_df$IVC[i]                # Column 10 for IVC
}

##Main questions A,B.....
data_mean[, 111:120] <- lapply(data_mean[, 111:120], function(x) as.numeric(as.character(x)))
#  Calculate the mean for the first four columns
mean_values2 <- colMeans(data_mean[, 111:120], na.rm = TRUE)
# Calculate variance
variance_values2 <- apply(data_mean[, 111:120], 2, var, na.rm = TRUE)
# Calculate the number of observations (non-NA values)
observations2 <- apply(data_mean[, 111:120], 2, function(x) sum(!is.na(x)))
data_filtrada[111:120, 6] <- mean_values2  # Copy mean values to column 6
data_filtrada[111:120, 7] <- variance_values2  # Copy variance values to column 7
data_filtrada[111:120, 11] <- observations2

data_mean[, 123] <- sapply(data_mean[, 123], function(x) as.numeric(as.character(x)))

# Calculate the mean of column 
mean_values3 <- mean(data_mean[, 123], na.rm = TRUE)
# Calculate variance
variance_values3 <- var(data_mean[, 123], na.rm = TRUE)
#remove columns questions

data_filtrada5 <- data_filtrada%>% select(-c(12:134))
##inser total mean

data_filtrada5 <- data_filtrada5 %>% add_column(`Mean Total score` = NA, .after = 3)%>%
  mutate(species = ifelse(row_number() <= 120, "Small_ruminants_meat", species))
data_filtrada5 <- data_filtrada5 %>% add_column(`Variance` = NA, .after = 4)%>%
  mutate(Country = ifelse(row_number() <= 120, "Denmark", Country))

data_filtrada5[1:1, 4] <- mean_values3  # Copy mean values to column 6
data_filtrada5[1:1, 5] <- variance_values3  # Copy variance values to column 7

file_name <- "Biocheck_09.07.xlsx"
sheet_name <- "Small_ruminants_meat"
write.xlsx(data_filtrada5, file = file_name, sheetName = sheet_name, overwrite = TRUE)

expo<-read_xlsx ("submissions-export veal calves_text_keys.xlsx",col_names = TRUE )
data<-data.frame(expo,stringsAsFactors = FALSE, check.names = FALSE)
data <- subset(data, Fictional != "Yes")
##filter country
data_filtrada <- data %>% filter(Country =='Denmark')%>%select(-c(1, 2, 8, 9, 10, 11))

##get column name
col_name <- names(data_filtrada)[79]
## Move the column to after the first column
data_filtrada <- data_filtrada %>% relocate(!!sym(col_name), .after = 2)
##add column and fill the species
data_filtrada <- data_filtrada %>% add_column(species = "Veal_calves", .after = 3)
##move total weight
col_nametw <- names(data_filtrada)[c(5, 6, 7)]
data_filtrada <- data_filtrada %>% relocate(all_of(col_nametw), .after = 88)
data_filtrada <- data_filtrada %>% add_column(question = NA, .after = 4)

col_names_6_to_153 <- names(data_filtrada)[6:86]
#Get the number of rows in the dataframe
num_rows <- nrow(data_filtrada)

# Append the column names as values below the existing values in column 4
data_filtrada[1:length(col_names_6_to_153), 5] <- col_names_6_to_153
## add colnames
data_filtrada <- data_filtrada %>% add_column(`Mean value` = NA, .after = 5)
data_filtrada <- data_filtrada %>% add_column(`Variance_range` = NA, .after = 6)
data_filtrada <- data_filtrada %>% add_column(`Mode` = NA, .after = 7)
data_filtrada <- data_filtrada %>% add_column(`Percentage` = NA, .after = 8)
data_filtrada <- data_filtrada %>% add_column(`Cualitative Variation Index` = NA, .after = 9)
data_filtrada <- data_filtrada %>% add_column(`Number of Answers` = NA, .after = 10)

##mean variance 
##removecol
data_mean <- data_filtrada[, -c(1:11)]
data_cuantitative <- c(1, 3:7, 36,62,67)
data_mean_subset <- data_mean[, data_cuantitative]
data_mean_subset <- lapply(data_mean_subset, function(x) as.numeric(as.character(x)))
data_mean_subset <- as.data.frame(data_mean_subset)
mean_values <- colMeans(data_mean_subset, na.rm = TRUE)
variance_values <- apply(data_mean_subset, 2, var, na.rm = TRUE)
num_observations <- apply(data_mean_subset, 2, function(x) sum(!is.na(x)))

data_filtrada[data_cuantitative, 6] <- mean_values  # Copy mean values to column 6
data_filtrada[data_cuantitative, 7] <- variance_values  # Copy variance values to column 7
data_filtrada[data_cuantitative, 11] <- num_observations 

##mode,rank,observations
data_cualitative <- c(2,8:35, 37:61,63:66,68:73)
# Custom function to calculate mode for a single column, excluding NA values
calculate_mode <- function(x) {
  x <- na.omit(x)  # Remove NA values
  uniq_vals <- unique(x)
  mode_value <- uniq_vals[which.max(tabulate(match(x, uniq_vals)))]
  # Calculate the frequency of the mode
  mode_frequency <- sum(x == mode_value)
  # Calculate the percentage of the mode
  mode_percentage <- (mode_frequency / length(x)) * 100
  return(list(mode_value = mode_value, mode_percentage = mode_percentage))
}
# Custom function to calculate the Index of Qualitative Variation (IVC)
calculate_ivc <- function(x) {
  x <- na.omit(x)  # Remove NA values
  N <- length(x)   # Total number of non-NA observations
  freq_table <- table(x)  # Frequency of each category
  freq_proportions <- freq_table / N  # Proportions of each category
  ivc <- 1 - sum(freq_proportions^2)  # Calculate IVC
  return(ivc)
}
# Subset the data frame to select columns 5 to 58
data_subset <- data_mean[, data_cualitative]
# Initialize a list to store the results for each column
results <- list()
# Loop through each column from 5 to 58
for (i in 1:ncol(data_subset)) {
  column_data <- data_subset[, i]
  # Remove NA values before processing
  column_data <- na.omit(column_data)
  # Calculate mode and its percentage
  mode_info <- calculate_mode(column_data)
  # Calculate the Index of Qualitative Variation (IVC)
  ivc_value <- calculate_ivc(column_data)
  # Calculate rank (handling NA by omitting them)
  rank_values <- rank(column_data, na.last = "keep", ties.method = "average")
  # Calculate number of observations (after NA removal)
  num_observations <- length(column_data)  # Since NAs are omitted, we use length
  # Store the results for the column in a list
  results[[i]] <- list(
    Mode = mode_info$mode_value,
    Mode_Percentage = mode_info$mode_percentage,
    IVC = ivc_value,
    Rank = rank_values,
    Num_Observations = num_observations
  )
}
# Convert the results into a data frame for better visualization
result_df <- data.frame(
  Column = colnames(data_subset),
  Mode = sapply(results, function(x) x$Mode),
  Mode_Percentage = sapply(results, function(x) x$Mode_Percentage),
  IVC = sapply(results, function(x) x$IVC),
  Num_Observations = sapply(results, function(x) x$Num_Observations)
)

num_modes <- length(result_df$Mode)
num_perc <- length(result_df$Mode_Percentage)
num_obs<-length(result_df$Num_Observations)
num_IVC<-length(result_df$IVC)
num_rows <- length(data_cualitative)
num_iterations <- pmin(num_modes, num_perc, num_obs, num_IVC, num_rows)

# Assign mode, mode percentage, number of observations, and IVC values to the specified rows
for (i in seq_len(num_iterations)) {
  data_filtrada[data_cualitative[i], 8] <- result_df$Mode[i]                # Column 8 for Mode
  data_filtrada[data_cualitative[i], 9] <- result_df$Mode_Percentage[i]     # Column 9 for Mode Percentage
  data_filtrada[data_cualitative[i], 11] <- result_df$Num_Observations[i]   # Column 11 for Number of Observations
  data_filtrada[data_cualitative[i], 10] <- result_df$IVC[i]                # Column 10 for IVC
}

##Main questions A,B.....
data_mean[, 74:81] <- lapply(data_mean[, 74:81], function(x) as.numeric(as.character(x)))
#  Calculate the mean for the first four columns
mean_values2 <- colMeans(data_mean[, 74:81], na.rm = TRUE)
# Calculate variance
variance_values2 <- apply(data_mean[, 74:81], 2, var, na.rm = TRUE)
# Calculate the number of observations (non-NA values)
observations2 <- apply(data_mean[, 74:81], 2, function(x) sum(!is.na(x)))
data_filtrada[74:81, 6] <- mean_values2  # Copy mean values to column 6
data_filtrada[74:81, 7] <- variance_values2  # Copy variance values to column 7
data_filtrada[74:81, 11] <- observations2

data_mean[, 84] <- sapply(data_mean[, 84], function(x) as.numeric(as.character(x)))

# Calculate the mean of column 
mean_values3 <- mean(data_mean[, 84], na.rm = TRUE)
# Calculate variance
variance_values3 <- var(data_mean[, 84], na.rm = TRUE)
#remove columns questions

data_filtrada6 <- data_filtrada%>% select(-c(12:95))
##inser total mean

data_filtrada6 <- data_filtrada6 %>% add_column(`Mean Total score` = NA, .after = 3)%>%
  mutate(species = ifelse(row_number() <= 81, "Veal_calves", species))
data_filtrada6 <- data_filtrada6 %>% add_column(`Variance` = NA, .after = 4)%>%
  mutate(Country = ifelse(row_number() <= 81, "Denmark", Country))

data_filtrada6[1:1, 4] <- mean_values3  # Copy mean values to column 6
data_filtrada6[1:1, 5] <- variance_values3  # Copy variance values to column 7

file_name <- "Biocheck_09.07.xlsx"
sheet_name <- "Veal_calves"
write.xlsx(data_filtrada6, file = file_name, sheetName = sheet_name, overwrite = TRUE)

wb <- createWorkbook()

# Add the first dataset ("Veal Calves") to a sheet
sheet_name1 <- "Broilers"
addWorksheet(wb, sheet_name1)
writeData(wb, sheet = sheet_name1, data_filtrada1)

# Add the second dataset ("Dairy Cattle") to a different sheet
sheet_name2 <- "Dairy_cattle"
addWorksheet(wb, sheet_name2)
writeData(wb, sheet = sheet_name2, data_filtrada2)  # Make sure to use the correct dataframe for Dairy Cattle
sheet_name3 <- "Pigs_indoor"
addWorksheet(wb, sheet_name3)
writeData(wb, sheet = sheet_name3, data_filtrada3)  # Make sure to use the correct dataframe for Dairy Cattle
sheet_name4 <- "Pigs_outdoor"
addWorksheet(wb, sheet_name4)
writeData(wb, sheet = sheet_name4, data_filtrada4)  # Make sure to use the correct dataframe for Dairy Cattle
sheet_name5 <- "Small_ruminants_meat"
addWorksheet(wb, sheet_name5)
writeData(wb, sheet = sheet_name5, data_filtrada5)  # Make sure to use the correct dataframe for Dairy Cattle
sheet_name6 <- "Veal-calves"
addWorksheet(wb, sheet_name6)
writeData(wb, sheet = sheet_name6, data_filtrada6)  # Make sure to use the correct dataframe for Dairy Cattle





# Save the workbook to a file
file_name <- "Biocheck_09.07.xlsx"
saveWorkbook(wb, file = file_name, overwrite = TRUE)














